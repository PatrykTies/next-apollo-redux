{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Router } from '../routes';\nimport ErrorMessage from './ErrorMessage';\nimport PostVoteUp from './PostVoteUp';\nimport PostVoteDown from './PostVoteDown';\nimport PostVoteCount from './PostVoteCount';\nconst POSTS_PER_PAGE = 10;\n\nfunction handleClick(event, id) {\n  event.preventDefault(); // With route name and params\n  // Router.pushRoute('blog/entry', { id: id })\n  // With route URL\n\n  Router.pushRoute(`/blog/${id}`);\n}\n\nfunction PostList({\n  data: {\n    loading,\n    error,\n    allPosts,\n    _allPostsMeta\n  },\n  loadMorePosts\n}) {\n  if (error) return __jsx(ErrorMessage, {\n    message: \"Error loading posts.\"\n  });\n\n  if (allPosts && allPosts.length) {\n    const areMorePosts = allPosts.length < _allPostsMeta.count;\n    return __jsx(\"section\", {\n      className: \"jsx-2126052553\"\n    }, __jsx(\"ul\", {\n      className: \"jsx-2126052553\"\n    }, allPosts.map((post, index) => __jsx(\"li\", {\n      key: post.id,\n      className: \"jsx-2126052553\"\n    }, __jsx(\"div\", {\n      className: \"jsx-2126052553\"\n    }, __jsx(\"span\", {\n      className: \"jsx-2126052553\"\n    }, index + 1, \". \"), __jsx(\"a\", {\n      href: `/blog/${post.id}`,\n      onClick: event => handleClick(event, post.id),\n      className: \"jsx-2126052553\"\n    }, post.title), __jsx(PostVoteUp, {\n      id: post.id,\n      votes: post.votes\n    }), __jsx(PostVoteCount, {\n      votes: post.votes\n    }), __jsx(PostVoteDown, {\n      id: post.id,\n      votes: post.votes\n    }))))), areMorePosts ? __jsx(\"button\", {\n      onClick: () => loadMorePosts(),\n      className: \"jsx-2126052553\"\n    }, ' ', loading ? 'Loading...' : 'Show More', ' ') : '', __jsx(_JSXStyle, {\n      id: \"2126052553\"\n    }, \"section.jsx-2126052553{padding-bottom:20px;}li.jsx-2126052553{display:block;margin-bottom:10px;}div.jsx-2126052553{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}a.jsx-2126052553{font-size:14px;margin-right:10px;-webkit-text-decoration:none;text-decoration:none;padding-bottom:0;border:0;}span.jsx-2126052553{font-size:14px;margin-right:5px;}ul.jsx-2126052553{margin:0;padding:0;}button.jsx-2126052553:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-style:solid;border-width:6px 4px 0 4px;border-color:#ffffff transparent transparent transparent;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYXRyeWt0aWVzL0Rlc2t0b3AvTEVBUk5JTkcvd2l0aC1hcG9sbG8tYW5kLXJlZHV4LXNhZ2EvY29tcG9uZW50cy9Qb3N0TGlzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxRG9CLEFBR2lDLEFBR04sQUFJSyxBQUlKLEFBT0EsQUFJTixBQUlTLFNBSFIsS0FuQlMsQ0FRRCxBQU9ELElBS25CLENBdkJBLFlBbUJBLENBZkEsQUFRdUIsc0NBY0YsWUFiRixPQWNVLEdBcEJkLE9BT0osU0FDWCxRQWEyRCxrREFwQjNELE9BcUJhLFdBQ0YsU0FDUSxpQkFDVCxRQUNWIiwiZmlsZSI6Ii9Vc2Vycy9wYXRyeWt0aWVzL0Rlc2t0b3AvTEVBUk5JTkcvd2l0aC1hcG9sbG8tYW5kLXJlZHV4LXNhZ2EvY29tcG9uZW50cy9Qb3N0TGlzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdyYXBocWwgfSBmcm9tICdyZWFjdC1hcG9sbG8nXG5pbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJ1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnLi4vcm91dGVzJ1xuaW1wb3J0IEVycm9yTWVzc2FnZSBmcm9tICcuL0Vycm9yTWVzc2FnZSdcbmltcG9ydCBQb3N0Vm90ZVVwIGZyb20gJy4vUG9zdFZvdGVVcCdcbmltcG9ydCBQb3N0Vm90ZURvd24gZnJvbSAnLi9Qb3N0Vm90ZURvd24nXG5pbXBvcnQgUG9zdFZvdGVDb3VudCBmcm9tICcuL1Bvc3RWb3RlQ291bnQnXG5cbmNvbnN0IFBPU1RTX1BFUl9QQUdFID0gMTBcblxuZnVuY3Rpb24gaGFuZGxlQ2xpY2sgKGV2ZW50LCBpZCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIC8vIFdpdGggcm91dGUgbmFtZSBhbmQgcGFyYW1zXG4gIC8vIFJvdXRlci5wdXNoUm91dGUoJ2Jsb2cvZW50cnknLCB7IGlkOiBpZCB9KVxuICAvLyBXaXRoIHJvdXRlIFVSTFxuICBSb3V0ZXIucHVzaFJvdXRlKGAvYmxvZy8ke2lkfWApXG59XG5cbmZ1bmN0aW9uIFBvc3RMaXN0ICh7XG4gIGRhdGE6IHsgbG9hZGluZywgZXJyb3IsIGFsbFBvc3RzLCBfYWxsUG9zdHNNZXRhIH0sXG4gIGxvYWRNb3JlUG9zdHNcbn0pIHtcbiAgaWYgKGVycm9yKSByZXR1cm4gPEVycm9yTWVzc2FnZSBtZXNzYWdlPSdFcnJvciBsb2FkaW5nIHBvc3RzLicgLz5cbiAgaWYgKGFsbFBvc3RzICYmIGFsbFBvc3RzLmxlbmd0aCkge1xuICAgIGNvbnN0IGFyZU1vcmVQb3N0cyA9IGFsbFBvc3RzLmxlbmd0aCA8IF9hbGxQb3N0c01ldGEuY291bnRcbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDx1bD5cbiAgICAgICAgICB7YWxsUG9zdHMubWFwKChwb3N0LCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgPGxpIGtleT17cG9zdC5pZH0+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHNwYW4+e2luZGV4ICsgMX0uIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgaHJlZj17YC9ibG9nLyR7cG9zdC5pZH1gfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXZlbnQgPT4gaGFuZGxlQ2xpY2soZXZlbnQsIHBvc3QuaWQpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtwb3N0LnRpdGxlfVxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICA8UG9zdFZvdGVVcCBpZD17cG9zdC5pZH0gdm90ZXM9e3Bvc3Qudm90ZXN9IC8+XG4gICAgICAgICAgICAgICAgPFBvc3RWb3RlQ291bnQgdm90ZXM9e3Bvc3Qudm90ZXN9IC8+XG4gICAgICAgICAgICAgICAgPFBvc3RWb3RlRG93biBpZD17cG9zdC5pZH0gdm90ZXM9e3Bvc3Qudm90ZXN9IC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC91bD5cbiAgICAgICAge2FyZU1vcmVQb3N0cyA/IChcbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGxvYWRNb3JlUG9zdHMoKX0+XG4gICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAge2xvYWRpbmcgPyAnTG9hZGluZy4uLicgOiAnU2hvdyBNb3JlJ317JyAnfVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApIDogKFxuICAgICAgICAgICcnXG4gICAgICAgICl9XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICBzZWN0aW9uIHtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBsaSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRpdiB7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYSB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdWwge1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnV0dG9uOmJlZm9yZSB7XG4gICAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiA2cHggNHB4IDAgNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZmZmZmZmIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICAgICAgICAgIHdpZHRoOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIClcbiAgfVxuICByZXR1cm4gPGRpdj5Mb2FkaW5nPC9kaXY+XG59XG5cbmV4cG9ydCBjb25zdCBhbGxQb3N0cyA9IGdxbGBcbiAgcXVlcnkgYWxsUG9zdHMoJGZpcnN0OiBJbnQhLCAkc2tpcDogSW50ISkge1xuICAgIGFsbFBvc3RzKG9yZGVyQnk6IGNyZWF0ZWRBdF9ERVNDLCBmaXJzdDogJGZpcnN0LCBza2lwOiAkc2tpcCkge1xuICAgICAgaWRcbiAgICAgIHRpdGxlXG4gICAgICB2b3Rlc1xuICAgICAgdXJsXG4gICAgICBjcmVhdGVkQXRcbiAgICB9XG4gICAgX2FsbFBvc3RzTWV0YSB7XG4gICAgICBjb3VudFxuICAgIH1cbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgYWxsUG9zdHNRdWVyeVZhcnMgPSB7XG4gIHNraXA6IDAsXG4gIGZpcnN0OiBQT1NUU19QRVJfUEFHRVxufVxuXG4vLyBUaGUgYGdyYXBocWxgIHdyYXBwZXIgZXhlY3V0ZXMgYSBHcmFwaFFMIHF1ZXJ5IGFuZCBtYWtlcyB0aGUgcmVzdWx0c1xuLy8gYXZhaWxhYmxlIG9uIHRoZSBgZGF0YWAgcHJvcCBvZiB0aGUgd3JhcHBlZCBjb21wb25lbnQgKFBvc3RMaXN0KVxuZXhwb3J0IGRlZmF1bHQgZ3JhcGhxbChhbGxQb3N0cywge1xuICBvcHRpb25zOiB7XG4gICAgdmFyaWFibGVzOiBhbGxQb3N0c1F1ZXJ5VmFyc1xuICB9LFxuICBwcm9wczogKHsgZGF0YSB9KSA9PiAoe1xuICAgIGRhdGEsXG4gICAgbG9hZE1vcmVQb3N0czogKCkgPT4ge1xuICAgICAgcmV0dXJuIGRhdGEuZmV0Y2hNb3JlKHtcbiAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgc2tpcDogZGF0YS5hbGxQb3N0cy5sZW5ndGhcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlUXVlcnk6IChwcmV2aW91c1Jlc3VsdCwgeyBmZXRjaE1vcmVSZXN1bHQgfSkgPT4ge1xuICAgICAgICAgIGlmICghZmV0Y2hNb3JlUmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNSZXN1bHRcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZpb3VzUmVzdWx0LCB7XG4gICAgICAgICAgICAvLyBBcHBlbmQgdGhlIG5ldyBwb3N0cyByZXN1bHRzIHRvIHRoZSBvbGQgb25lXG4gICAgICAgICAgICBhbGxQb3N0czogWy4uLnByZXZpb3VzUmVzdWx0LmFsbFBvc3RzLCAuLi5mZXRjaE1vcmVSZXN1bHQuYWxsUG9zdHNdXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH0pXG59KShQb3N0TGlzdClcbiJdfQ== */\\n/*@ sourceURL=/Users/patrykties/Desktop/LEARNING/with-apollo-and-redux-saga/components/PostList.js */\"));\n  }\n\n  return __jsx(\"div\", null, \"Loading\");\n}\n\nexport const allPosts = gql`\n  query allPosts($first: Int!, $skip: Int!) {\n    allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\n      id\n      title\n      votes\n      url\n      createdAt\n    }\n    _allPostsMeta {\n      count\n    }\n  }\n`;\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: POSTS_PER_PAGE // The `graphql` wrapper executes a GraphQL query and makes the results\n  // available on the `data` prop of the wrapped component (PostList)\n\n};\nexport default graphql(allPosts, {\n  options: {\n    variables: allPostsQueryVars\n  },\n  props: ({\n    data\n  }) => ({\n    data,\n    loadMorePosts: () => {\n      return data.fetchMore({\n        variables: {\n          skip: data.allPosts.length\n        },\n        updateQuery: (previousResult, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            return previousResult;\n          }\n\n          return _Object$assign({}, previousResult, {\n            // Append the new posts results to the old one\n            allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n          });\n        }\n      });\n    }\n  })\n})(PostList);","map":{"version":3,"sources":["/Users/patrykties/Desktop/LEARNING/with-apollo-and-redux-saga/components/PostList.js"],"names":["graphql","gql","Router","ErrorMessage","PostVoteUp","PostVoteDown","PostVoteCount","POSTS_PER_PAGE","handleClick","event","id","preventDefault","pushRoute","PostList","data","loading","error","allPosts","_allPostsMeta","loadMorePosts","length","areMorePosts","count","map","post","index","title","votes","allPostsQueryVars","skip","first","options","variables","props","fetchMore","updateQuery","previousResult","fetchMoreResult"],"mappings":"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","sourcesContent":["import { graphql } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport { Router } from '../routes'\nimport ErrorMessage from './ErrorMessage'\nimport PostVoteUp from './PostVoteUp'\nimport PostVoteDown from './PostVoteDown'\nimport PostVoteCount from './PostVoteCount'\n\nconst POSTS_PER_PAGE = 10\n\nfunction handleClick (event, id) {\n  event.preventDefault()\n  // With route name and params\n  // Router.pushRoute('blog/entry', { id: id })\n  // With route URL\n  Router.pushRoute(`/blog/${id}`)\n}\n\nfunction PostList ({\n  data: { loading, error, allPosts, _allPostsMeta },\n  loadMorePosts\n}) {\n  if (error) return <ErrorMessage message='Error loading posts.' />\n  if (allPosts && allPosts.length) {\n    const areMorePosts = allPosts.length < _allPostsMeta.count\n    return (\n      <section>\n        <ul>\n          {allPosts.map((post, index) => (\n            <li key={post.id}>\n              <div>\n                <span>{index + 1}. </span>\n                <a\n                  href={`/blog/${post.id}`}\n                  onClick={event => handleClick(event, post.id)}\n                >\n                  {post.title}\n                </a>\n                <PostVoteUp id={post.id} votes={post.votes} />\n                <PostVoteCount votes={post.votes} />\n                <PostVoteDown id={post.id} votes={post.votes} />\n              </div>\n            </li>\n          ))}\n        </ul>\n        {areMorePosts ? (\n          <button onClick={() => loadMorePosts()}>\n            {' '}\n            {loading ? 'Loading...' : 'Show More'}{' '}\n          </button>\n        ) : (\n          ''\n        )}\n        <style jsx>{`\n          section {\n            padding-bottom: 20px;\n          }\n          li {\n            display: block;\n            margin-bottom: 10px;\n          }\n          div {\n            align-items: center;\n            display: flex;\n          }\n          a {\n            font-size: 14px;\n            margin-right: 10px;\n            text-decoration: none;\n            padding-bottom: 0;\n            border: 0;\n          }\n          span {\n            font-size: 14px;\n            margin-right: 5px;\n          }\n          ul {\n            margin: 0;\n            padding: 0;\n          }\n          button:before {\n            align-self: center;\n            border-style: solid;\n            border-width: 6px 4px 0 4px;\n            border-color: #ffffff transparent transparent transparent;\n            content: '';\n            height: 0;\n            margin-right: 5px;\n            width: 0;\n          }\n        `}</style>\n      </section>\n    )\n  }\n  return <div>Loading</div>\n}\n\nexport const allPosts = gql`\n  query allPosts($first: Int!, $skip: Int!) {\n    allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\n      id\n      title\n      votes\n      url\n      createdAt\n    }\n    _allPostsMeta {\n      count\n    }\n  }\n`\n\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: POSTS_PER_PAGE\n}\n\n// The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\nexport default graphql(allPosts, {\n  options: {\n    variables: allPostsQueryVars\n  },\n  props: ({ data }) => ({\n    data,\n    loadMorePosts: () => {\n      return data.fetchMore({\n        variables: {\n          skip: data.allPosts.length\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          if (!fetchMoreResult) {\n            return previousResult\n          }\n          return Object.assign({}, previousResult, {\n            // Append the new posts results to the old one\n            allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n          })\n        }\n      })\n    }\n  })\n})(PostList)\n"]},"metadata":{},"sourceType":"module"}