{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo'; // Gets the display name of a JSX component for dev tools\n\nfunction getComponentDisplayName(Component) {\n  return Component.displayName || Component.name || 'Unknown';\n}\n\nexport default (function (ComposedComponent) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithApollo, _React$Component);\n\n    _createClass(WithApollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var serverState, composedInitialProps, apollo, state;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  // Initial serverState with apollo (empty)\n                  serverState = {\n                    apollo: {\n                      data: {}\n                    } // Evaluate the composed component's getInitialProps()\n\n                  };\n                  composedInitialProps = {};\n\n                  if (!ComposedComponent.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return ComposedComponent.getInitialProps(ctx);\n\n                case 5:\n                  composedInitialProps = _context.sent;\n\n                case 6:\n                  if (!false) {\n                    _context.next = 19;\n                    break;\n                  }\n\n                  apollo = initApollo();\n                  _context.prev = 8;\n                  _context.next = 11;\n                  return getDataFromTree(__jsx(ApolloProvider, {\n                    client: apollo\n                  }, __jsx(ComposedComponent, composedInitialProps)), {\n                    router: {\n                      asPath: ctx.asPath,\n                      pathname: ctx.pathname,\n                      query: ctx.query\n                    }\n                  });\n\n                case 11:\n                  _context.next = 15;\n                  break;\n\n                case 13:\n                  _context.prev = 13;\n                  _context.t0 = _context[\"catch\"](8);\n\n                case 15:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind(); // Extract query data from the store\n\n                  state = {}; // Extract query data from the Apollo store\n\n                  serverState = _Object$assign(state, {\n                    apollo: {\n                      data: apollo.cache.extract()\n                    }\n                  });\n                  console.log('APOLLO', serverState);\n\n                case 19:\n                  return _context.abrupt(\"return\", _objectSpread({\n                    serverState: serverState\n                  }, composedInitialProps));\n\n                case 20:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[8, 13]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithApollo(props) {\n      var _this;\n\n      _classCallCheck(this, WithApollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithApollo).call(this, props));\n      _this.apollo = initApollo(props.serverState.apollo.data);\n      return _this;\n    }\n\n    _createClass(WithApollo, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(ApolloProvider, {\n          client: this.apollo\n        }, __jsx(ComposedComponent, this.props));\n      }\n    }]);\n\n    return WithApollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithApollo(\".concat(getComponentDisplayName(ComposedComponent), \")\")), _defineProperty(_class, \"propTypes\", {\n    serverState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["/Users/patrykties/Desktop/LEARNING/with-apollo-and-redux-saga/lib/withApollo.js"],"names":["React","PropTypes","ApolloProvider","getDataFromTree","Head","initApollo","getComponentDisplayName","Component","displayName","name","ComposedComponent","ctx","serverState","apollo","data","composedInitialProps","getInitialProps","router","asPath","pathname","query","rewind","state","cache","extract","console","log","props","object","isRequired"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,cAAhD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,SAASC,uBAAT,CAAkCC,SAAlC,EAA6C;AAC3C,SAAOA,SAAS,CAACC,WAAV,IAAyBD,SAAS,CAACE,IAAnC,IAA2C,SAAlD;AACD;;AAED,gBAAe,UAAAC,iBAAiB,EAAI;AAAA;;AAClC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAQgCC,GARhC;AAAA;AAAA;AAAA;AAAA;AAAA;AASI;AACIC,kBAAAA,WAVR,GAUsB;AAChBC,oBAAAA,MAAM,EAAE;AACNC,sBAAAA,IAAI,EAAE;AADA,qBADQ,CAMlB;;AANkB,mBAVtB;AAiBQC,kBAAAA,oBAjBR,GAiB+B,EAjB/B;;AAAA,uBAkBQL,iBAAiB,CAACM,eAlB1B;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAmBmCN,iBAAiB,CAACM,eAAlB,CAAkCL,GAAlC,CAnBnC;;AAAA;AAmBMI,kBAAAA,oBAnBN;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBYF,kBAAAA,MAzBZ,GAyBqBR,UAAU,EAzB/B;AAAA;AAAA;AAAA,yBA6BcF,eAAe,CACnB,MAAC,cAAD;AAAgB,oBAAA,MAAM,EAAEU;AAAxB,qBACE,MAAC,iBAAD,EAAuBE,oBAAvB,CADF,CADmB,EAInB;AACEE,oBAAAA,MAAM,EAAE;AACNC,sBAAAA,MAAM,EAAEP,GAAG,CAACO,MADN;AAENC,sBAAAA,QAAQ,EAAER,GAAG,CAACQ,QAFR;AAGNC,sBAAAA,KAAK,EAAET,GAAG,CAACS;AAHL;AADV,mBAJmB,CA7B7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA8CM;AACA;AACAhB,kBAAAA,IAAI,CAACiB,MAAL,GAhDN,CAkDM;;AACMC,kBAAAA,KAnDZ,GAmDoB,EAnDpB,EAqDM;;AACAV,kBAAAA,WAAW,GAAG,eAAcU,KAAd,EAAqB;AACjCT,oBAAAA,MAAM,EAAE;AAAEC,sBAAAA,IAAI,EAAED,MAAM,CAACU,KAAP,CAAaC,OAAb;AAAR;AADyB,mBAArB,CAAd;AAGAC,kBAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBd,WAAtB;;AAzDN;AAAA;AA4DMA,oBAAAA,WAAW,EAAXA;AA5DN,qBA6DSG,oBA7DT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAiEE,wBAAaY,KAAb,EAAoB;AAAA;;AAAA;;AAClB,sFAAMA,KAAN;AACA,YAAKd,MAAL,GAAcR,UAAU,CAACsB,KAAK,CAACf,WAAN,CAAkBC,MAAlB,CAAyBC,IAA1B,CAAxB;AAFkB;AAGnB;;AApEH;AAAA;AAAA,+BAsEY;AAER,eACE,MAAC,cAAD;AAAgB,UAAA,MAAM,EAAE,KAAKD;AAA7B,WACE,MAAC,iBAAD,EAAuB,KAAKc,KAA5B,CADF,CADF;AAKD;AA7EH;;AAAA;AAAA,IAAgC3B,KAAK,CAACO,SAAtC,+DACqCD,uBAAuB,CACxDI,iBADwD,CAD5D,8CAIqB;AACjBE,IAAAA,WAAW,EAAEX,SAAS,CAAC2B,MAAV,CAAiBC;AADb,GAJrB;AA+ED,CAhFD","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ApolloProvider, getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\nimport initApollo from './initApollo'\n\n// Gets the display name of a JSX component for dev tools\nfunction getComponentDisplayName (Component) {\n  return Component.displayName || Component.name || 'Unknown'\n}\n\nexport default ComposedComponent => {\n  return class WithApollo extends React.Component {\n    static displayName = `WithApollo(${getComponentDisplayName(\n      ComposedComponent\n    )})`\n    static propTypes = {\n      serverState: PropTypes.object.isRequired\n    }\n\n    static async getInitialProps (ctx) {\n      // Initial serverState with apollo (empty)\n      let serverState = {\n        apollo: {\n          data: {}\n        }\n      }\n\n      // Evaluate the composed component's getInitialProps()\n      let composedInitialProps = {}\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx)\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      if (typeof window === 'undefined') {\n        const apollo = initApollo()\n\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <ApolloProvider client={apollo}>\n              <ComposedComponent {...composedInitialProps} />\n            </ApolloProvider>,\n            {\n              router: {\n                asPath: ctx.asPath,\n                pathname: ctx.pathname,\n                query: ctx.query\n              }\n            }\n          )\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n        }\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n\n        // Extract query data from the store\n        const state = {}\n\n        // Extract query data from the Apollo store\n        serverState = Object.assign(state, {\n          apollo: { data: apollo.cache.extract() }\n        })\n        console.log('APOLLO', serverState)\n      }\n      return {\n        serverState,\n        ...composedInitialProps\n      }\n    }\n\n    constructor (props) {\n      super(props)\n      this.apollo = initApollo(props.serverState.apollo.data)\n    }\n\n    render () {\n\n      return (\n        <ApolloProvider client={this.apollo}>\n          <ComposedComponent {...this.props} />\n        </ApolloProvider>\n      )\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}