{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nlet apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (true) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState) {\n  const isBrowser = false; // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn',\n      // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/patrykties/Desktop/LEARNING/with-apollo-and-redux-saga/lib/initApollo.js"],"names":["ApolloClient","HttpLink","InMemoryCache","fetch","apolloClient","global","create","initialState","isBrowser","connectToDevTools","ssrMode","link","uri","credentials","cache","restore","initApollo"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACA,UAAmC;AACjCC,EAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACD;;AAED,SAASG,MAAT,CAAiBC,YAAjB,EAA+B;AAC7B,QAAMC,SAAS,QAAf,CAD6B,CAE7B;;AACA,SAAO,IAAIR,YAAJ,CAAiB;AACtBS,IAAAA,iBAAiB,EAAED,SADG;AAEtBE,IAAAA,OAAO,EAAE,CAACF,SAFY;AAED;AACrBG,IAAAA,IAAI,EAAE,IAAIV,QAAJ,CAAa;AACjBW,MAAAA,GAAG,EAAE,4DADY;AACkD;AACnEC,MAAAA,WAAW,EAAE,aAFI,CAEU;;AAFV,KAAb,CAHgB;AAOtBC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ,GAAoBa,OAApB,CAA4BR,YAAY,IAAI,EAA5C;AAPe,GAAjB,CAAP;AASD;;AAED,eAAe,SAASS,UAAT,CAAqBT,YAArB,EAAmC;AAChD;AACA;AACA,YAAmC;AACjC,WAAOD,MAAM,CAACC,YAAD,CAAb;AACD,GAL+C,CAOhD;;;AACA,MAAI,CAACH,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGE,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOH,YAAP;AACD","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport fetch from 'isomorphic-unfetch'\n\nlet apolloClient = null\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (typeof window === 'undefined') {\n  global.fetch = fetch\n}\n\nfunction create (initialState) {\n  const isBrowser = typeof window !== 'undefined'\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn', // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  })\n}\n\nexport default function initApollo (initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return create(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState)\n  }\n\n  return apolloClient\n}\n"]},"metadata":{},"sourceType":"module"}